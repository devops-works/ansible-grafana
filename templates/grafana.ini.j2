##################### Grafana Configuration Example #####################
#
# Everything has defaults so you only need to uncomment things you want to
# change

# possible values : production, development
; app_mode = production

#################################### Paths ####################################
[paths]
# Path to where grafana can store temp files, sessions, and the sqlite3 db (if that is used)
#
{% if grafana_data_path is defined %}
data = "{{ grafana_data_path }}"
{% else %}
;data = /var/lib/grafana
{% endif %}
#
# Directory where grafana can store logs
#
{% if grafana_log_path is defined %}
logs = "{{ grafana_log_path }}"
{% else %}
;logs = /var/log/grafana
{% endif %}
#
# Directory where grafana will automatically scan and look for plugins
#
{% if grafana_plugins_path is defined %}
plugins = {{ grafana_plugins_path }}
{% else %}
;plugins = /var/lib/grafana/plugins
{% endif %}
#
# Directory where grafana will automatically provision dashboards from
#
{% if grafana_provisioning_path is defined %}
provisioning = {{ grafana_provisioning_path }}
{% else %}
;provisioning = /etc/grafana/provisioning/
{% endif %}

#
#################################### Server ####################################
[server]
# Protocol (http or https)
{% if grafana_http_protocol is defined %}
plugins = {{ grafana_http_protocol }}
{% else %}
;protocol = http
{% endif %}

# The ip address to bind to, empty will bind to all interfaces
{% if grafana_http_addr is defined %}http_addr = {{ grafana_http_addr }}{% endif %}

# The http port  to use
{% if grafana_http_port is defined %}http_port = {{ grafana_http_port }}{% endif %}

# The public facing domain name used to access grafana from a browser
{% if grafana_domain is defined %}domain = {{ grafana_domain }}{% endif %}

# Redirect to correct domain if host header does not match domain
# Prevents DNS rebinding attacks
{% if grafana_enforce_domain is defined %}enforce_domain = {{ grafana_enforce_domain }}{% endif %}

# The full public facing url
{% if grafana_root_url is defined %}
root_url = {{ grafana_root_url }}
{% else %}
root_url = %(protocol)s://%(domain)s:%(http_port)s/
{% endif %}

# Log web requests
;router_logging = false

# the path relative working path
;static_root_path = public

# enable gzip
{% if grafana_enable_gzip is defined %}enable_gzip = {{ grafana_enable_gzip }}{% endif %}

# https certs & key file
{% if grafana_certificate_file is defined %}cert_file = "{{ grafana_certificate_file }}"{% endif %}
{% if grafana_certificate_key is defined %}cert_key = "{{ grafana_certificate_key }}"{% endif %}

#################################### Database ####################################
[database]
# Either "mysql", "postgres" or "sqlite3", it's your choice
;type = sqlite3
;host = 127.0.0.1:3306
;name = grafana
;user = root
;password =

# For "postgres" only, either "disable", "require" or "verify-full"
;ssl_mode = disable

# For "sqlite3" only, path relative to data_path setting
;path = grafana.db

#################################### Session ####################################
[session]
# Either "memory", "file", "redis", "mysql", "postgres", default is "file"
;provider = file

# Provider config options
# memory: not have any config yet
# file: session dir path, is relative to grafana data_path
# redis: config like redis server e.g. `addr=127.0.0.1:6379,pool_size=100,db=grafana`
# mysql: go-sql-driver/mysql dsn config string, e.g. `user:password@tcp(127.0.0.1:3306)/database_name`
# postgres: user=a password=b host=localhost port=5432 dbname=c sslmode=disable
;provider_config = sessions

# Session cookie name
;cookie_name = grafana_sess

# If you use session in https only, default is false
;cookie_secure = false

# Session life time, default is 86400
;session_life_time = 86400

#################################### Analytics ####################################
[analytics]
# Server reporting, sends usage counters to stats.grafana.org every 24 hours.
# No ip addresses are being tracked, only simple counters to track
# running instances, dashboard and error counts. It is very helpful to us.
# Change this option to false to disable reporting.
;reporting_enabled = true

# Set to false to disable all checks to https://grafana.net
# for new vesions (grafana itself and plugins), check is used
# in some UI views to notify that grafana or plugin update exists
# This option does not cause any auto updates, nor send any information
# only a GET request to http://grafana.net to get latest versions
check_for_updates = true

# Google Analytics universal tracking code, only enabled if you specify an id here
;google_analytics_ua_id =

#################################### Security ####################################
[security]
# default admin user, created on startup
admin_user = {{ grafana_admin_user }}

# default admin password, can be changed before first start of grafana,  or in profile settings
admin_password = {{ grafana_admin_password }}

# used for signing
{% if grafana_secret_key is defined %}secret_key = {{ grafana_secret_key }}{% endif %}

# Auto-login remember days
{% if grafana_login_remember_days is defined %}login_remember_days = {{ grafana_login_remember_days }}{% endif %}
{% if grafana_cookie_username is defined %}cookie_username = {{ grafana_cookie_username }}{% endif %}
{% if grafana_cookie_remember_name is defined %}cookie_remember_name = {{ grafana_cookie_remember_name }}{% endif %}

# disable gravatar profile images
disable_gravatar = {{ grafana_disable_gravatar }}

# data source proxy whitelist (ip_or_domain:port seperated by spaces)
;data_source_proxy_whitelist =

[snapshots]
# snapshot sharing options
;external_enabled = true
;external_snapshot_url = https://snapshots-origin.raintank.io
;external_snapshot_name = Publish to snapshot.raintank.io

{% for stortype, storvalue in grafana_external_image_storage.items() %}
[external_image_storage]
provider = {{ stortype }}

[external_image_storage.{{ stortype }}]
{%   for key, value in storvalue.items() %}
{{ key }} = {{ value }}
{%   endfor %}
{% endfor %}

#################################### Users ####################################
[users]
# disable user signup / registration
allow_sign_up = {{ grafana_allow_sign_up }}

# Allow non admin users to create organizations
{% if grafana_allow_org_create is defined %}allow_org_create = {{ grafana_allow_org_create }}{% endif %}

# Set to true to automatically assign new users to the default organization (id 1)
{% if grafana_auto_assign_org is defined %}auto_assign_org = {{ grafana_auto_assign_org }}{% endif %}

# Default role new users will be automatically assigned (if disabled above is set to true)
{% if grafana_auto_assign_org_role is defined %}auto_assign_org_role = {{ grafana_auto_assign_org_role }}{% endif %}

# Background text for the user field on the login page
{% if grafana_login_hint is defined %}login_hint = {{ grafana_login_hint }}{% endif %}

#################################### Anonymous Auth ##########################
[auth.anonymous]
# enable anonymous access
enabled = {{ grafana_auth_anonymous_enabled }}

# specify organization name that should be used for unauthenticated users
{% if grafana_auth_anonymous_org_name is defined %}org_name = {{ grafana_auth_anonymous_org_name }}{% endif %}

# specify role for unauthenticated users
{% if grafana_auth_anonymous_org_role is defined %}org_role = {{ grafana_auth_anonymous_org_role }}{% endif %}

#################################### Github Auth ##########################
[auth.github]
enabled = {{ grafana_auth_github_enabled }}
{% if grafana_auth_github_allow_sign_up is defined         %}allow_sign_up = {{ grafana_auth_github_allow_sign_up }}{% endif %}
{% if grafana_auth_github_client_id is defined             %}client_id = {{ grafana_auth_github_client_id }}{% endif %}
{% if grafana_auth_github_client_secret is defined         %}client_secret = {{ grafana_auth_github_client_secret }}{% endif %}
{% if grafana_auth_github_scopes is defined                %}scopes = {{ grafana_auth_github_scopes }}{% endif %}
{% if grafana_auth_github_auth_url is defined              %}auth_url = {{ grafana_auth_github_auth_url }}{% endif %}
{% if grafana_auth_github_token_url is defined             %}token_url = {{ grafana_auth_github_token_url }}{% endif %}
{% if grafana_auth_github_api_url is defined               %}api_url = {{ grafana_auth_github_api_url }}{% endif %}
{% if grafana_auth_github_team_ids is defined              %}team_ids = {{ grafana_auth_github_team_ids }}{% endif %}
{% if grafana_auth_github_allowed_organizations is defined %}allowed_organizations = {{ grafana_auth_github_allowed_organizations }}{% endif %}

#################################### Google Auth ##########################
[auth.google]
enabled = {{ grafana_auth_google_enabled }}
{% if grafana_auth_google_allow_sign_up is defined   %}allow_sign_up = {{ grafana_auth_google_allow_sign_up }}{% endif %}
{% if grafana_auth_google_client_id is defined       %}client_id = {{ grafana_auth_google_client_id }}{% endif %}
{% if grafana_auth_google_client_secret is defined   %}client_secret = {{ grafana_auth_google_client_secret }}{% endif %}
{% if grafana_auth_google_scopes is defined          %}scopes = {{ grafana_auth_google_scopes }}{% endif %}
{% if grafana_auth_google_auth_url is defined        %}auth_url = {{ grafana_auth_google_auth_url }}{% endif %}
{% if grafana_auth_google_token_url is defined       %}token_url = {{ grafana_auth_google_token_url }}{% endif %}
{% if grafana_auth_google_api_url is defined         %}api_url = {{ grafana_auth_google_api_url }}{% endif %}
{% if grafana_auth_google_allowed_domains is defined %}allowed_domains = {{ grafana_auth_google_allowed_domains }}{% endif %}

#################################### Auth Proxy ##########################
[auth.proxy]
;enabled = false
;header_name = X-WEBAUTH-USER
;header_property = username
;auto_sign_up = true

#################################### Basic Auth ##########################
[auth.basic]
{% if grafana_auth_basic is defined %}enabled = {{ grafana_auth_basic }}{% endif %}

#################################### Auth LDAP ##########################
[auth.ldap]
enabled = {{ grafana_auth_ldap_enabled }}
{% if grafana_auth_ldap_config_file is defined %}config_file = {{ grafana_auth_ldap_config_file }}{% endif %}

#################################### SMTP / Emailing ##########################
[smtp]
enabled = {{ grafana_smtp_enabled }}
{% if grafana_smtp_host is defined %}host = {{ grafana_smtp_host }}{% endif %}
{% if grafana_smtp_user is defined %}user = {{ grafana_smtp_user }}{% endif %}
{% if grafana_smtp_password is defined %}password = {{ grafana_smtp_password }}{% endif %}
{% if grafana_smtp_cert_file is defined %}cert_file = {{ grafana_smtp_cert_file }}{% endif %}
{% if grafana_smtp_key_file is defined %}key_file = {{ grafana_smtp_key_file }}{% endif %}
{% if grafana_smtp_skip_verify is defined %}skip_verify = {{ grafana_smtp_skip_verify }}{% endif %}
{% if grafana_smtp_from_address is defined %}from_address = {{ grafana_smtp_from_address }}{% endif %}

[emails]
{% if grafana_welcome_email_on_sign_up is defined %}welcome_email_on_sign_up = {{ grafana_welcome_email_on_sign_up }}{% endif %}

#################################### Logging ##########################
[log]
# Either "console", "file", "syslog". Default is console and  file
# Use comma to separate multiple modes, e.g. "console, file"
;mode = console, file

# Buffer length of channel, keep it as it is if you don't know what it is.
;buffer_len = 10000

# Either "Trace", "Debug", "Info", "Warn", "Error", "Critical", default is "Info"
;level = Info

# For "console" mode only
[log.console]
;level =

# For "file" mode only
[log.file]
;level =
# This enables automated log rotate(switch of following options), default is true
;log_rotate = true

# Max line number of single file, default is 1000000
;max_lines = 1000000

# Max size shift of single file, default is 28 means 1 << 28, 256MB
;max_lines_shift = 28

# Segment log daily, default is true
;daily_rotate = true

# Expired days of log file(delete after max days), default is 7
;max_days = 7

#################################### AMPQ Event Publisher ##########################
[event_publisher]
;enabled = false
;rabbitmq_url = amqp://localhost/
;exchange = grafana_events

;#################################### Dashboard JSON files ##########################
[dashboards.json]
;enabled = false
;path = /var/lib/grafana/dashboards
